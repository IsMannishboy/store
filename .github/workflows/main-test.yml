name: main test

on:
  push:
    branches: dev
    paths:
      - "app/**"

jobs:

  # üß± 1. –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          echo "üöß Building Docker images..."
          docker compose build

      - name: Save built images as artifact
        run: |
          mkdir -p /tmp/docker
          docker save $(docker images --format '{{.Repository}}:{{.Tag}}' | grep -v "<none>") -o /tmp/docker/images.tar

      - name: Upload Docker images
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: /tmp/docker/images.tar

  # üß™ 2. –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—ã
  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Download Docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: /tmp/docker

      - name: Load Docker images
        run: |
          echo "üì¶ Loading Docker images..."
          docker load -i /tmp/docker/images.tar

      - name: Run containers
        run: |
          docker compose up -d
          echo "‚è≥ Waiting for containers to start..."
          sleep 5
          docker compose logs --tail=100
          services=($(docker ps -a --format "{{.Names}}"))
          echo "Services: ${services[@]}"

          for dir in ${services[@]}; do
            if [ "$dir" != "cash" ] && [ "$dir" != "store_nginx" ] && [ "$dir" != "mydb" ]; then
              echo "üïì Waiting for $dir to be healthy..."
              for i in {1..30}; do
                state=$(docker inspect -f '{{.State.Status}}' "$dir")
                if [ "$state" = "running" ]; then
                  echo "‚úÖ $dir is running"
                  break
                else
                  echo "‚è≥ $dir state: $state, waiting..."
                  sleep 2
                fi
              done

              state=$(docker inspect -f '{{.State.Status}}' "$dir")
              if [ "$state" != "running" ]; then
                echo "‚ùå $dir is not running (state=$state), skipping tests"
                docker logs $dir
                continue
              fi

              echo "‚ñ∂Ô∏è Running tests in $dir..."
              docker exec "$dir" go test ./... || true
            fi
          done
